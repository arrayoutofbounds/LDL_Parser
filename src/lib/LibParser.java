/* Generated By:JavaCC: Do not edit this line. LibParser.java */
package lib;
public class LibParser implements LibParserConstants {
  private int website_count = 0;

  final public void Library() throws ParseException {
                 int count = 0;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIBRARY:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(LIBRARY);
              count++;System.out.println("count is now " + count);
      jj_consume_token(QUOTE);
      label_2:
      while (true) {
        Word();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LIBRARY:
        case WEBSITE:
        case BUILDING:
        case TIMEOFYEAR:
        case START:
        case END:
        case HOURS:
        case CLOSED:
        case STAFF:
        case POSITION:
        case EMAIL:
        case TYPE:
        case RATE:
        case BOOKCOLLECTION:
        case BOOK:
        case TITLE:
        case AUTHOR:
        case AM:
        case PM:
        case DAYS_SHORT:
        case DAYS_LONG:
        case WORD:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(QUOTE);
      jj_consume_token(LB);
      Content();
      jj_consume_token(RB);
    }
    jj_consume_token(0);
   if (count > 1)
   {
     {if (true) throw new ParseException("Sorry, but you cannot have more than one LIBRARY in a input file");}
   }
  }

  final public void Content() throws ParseException {
    Website();
  }

  final public void Website() throws ParseException {
    jj_consume_token(WEBSITE);
    jj_consume_token(URL);
  }

// this has all the possible tokens that could match. 
  final public void Word() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DAYS_SHORT:
      jj_consume_token(DAYS_SHORT);
      break;
    case DAYS_LONG:
      jj_consume_token(DAYS_LONG);
      break;
    case AM:
      jj_consume_token(AM);
      break;
    case PM:
      jj_consume_token(PM);
      break;
    case AUTHOR:
      jj_consume_token(AUTHOR);
      break;
    case TITLE:
      jj_consume_token(TITLE);
      break;
    case BOOK:
      jj_consume_token(BOOK);
      break;
    case BOOKCOLLECTION:
      jj_consume_token(BOOKCOLLECTION);
      break;
    case RATE:
      jj_consume_token(RATE);
      break;
    case TYPE:
      jj_consume_token(TYPE);
      break;
    case EMAIL:
      jj_consume_token(EMAIL);
      break;
    case POSITION:
      jj_consume_token(POSITION);
      break;
    case STAFF:
      jj_consume_token(STAFF);
      break;
    case CLOSED:
      jj_consume_token(CLOSED);
      break;
    case HOURS:
      jj_consume_token(HOURS);
      break;
    case END:
      jj_consume_token(END);
      break;
    case START:
      jj_consume_token(START);
      break;
    case TIMEOFYEAR:
      jj_consume_token(TIMEOFYEAR);
      break;
    case BUILDING:
      jj_consume_token(BUILDING);
      break;
    case WEBSITE:
      jj_consume_token(WEBSITE);
      break;
    case LIBRARY:
      jj_consume_token(LIBRARY);
      break;
    case WORD:
      jj_consume_token(WORD);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public LibParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x7fffc000,0x7fffc000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x2c6,0x2c6,};
   }

  /** Constructor with InputStream. */
  public LibParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LibParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LibParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LibParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LibParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LibParser(LibParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LibParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
