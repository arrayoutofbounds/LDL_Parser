/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(LibParser)package lib;
public class LibParser{
  private int website_count = 0;}PARSER_END(LibParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{
  < LP : "(" >
| < RP : ")" >
| < COMMA : "," >
| < COLON : ":" >
| < LB : "{" >
| < RB : "}" >
| < SEMI: ";">
| < QUOTE : "\"" >
| < UNDERSCORE : "_" >
| < HYPHEN : "-" >
| < LIBRARY : "LIBRARY" >
| < WEBSITE : "WEBSITE" >
| < BUILDING : "BUILDING" >
| < TIMEOFYEAR: "TIMEOFYEAR" >
| < START: "START" >
| < END : "END" >
| < HOURS : "HOURS" >
| < CLOSED : "CLOSED" >
| < STAFF : "STAFF" >
| < POSITION : "POSITION" >
| < EMAIL : "EMAIL" >
| < TYPE : "TYPE" >
| < RATE : "RATE" >
| < BOOKCOLLECTION : "BOOKCOLLECTION" >
| < BOOK : "BOOK" >
| < TITLE : "TITLE" >
| < AUTHOR : "AUTHOR" >
| < #DIGIT : ["0"-"9"] >
| < BUILDING_NUMBER : (< DIGIT >){3} >
| < AM : "AM" >
| < PM : "PM" >
| < TO : "to" >
| < DAY : (< DIGIT >) | (< DIGIT >){2} >
| < YEAR : (< DIGIT >){4} >
| < #PROTOCOL1 : "http://"  >
| < #PROTOCOL2 : "https://"  >
| < URL : < QUOTE > (< PROTOCOL1 > | < PROTOCOL2 >) (["a"-"z","A"-"Z","_","-",".", "/"])* < QUOTE >> // INCOMPLETE
| < DAYS_SHORT : "Mon" | "Tue" | "Wed" | "Thu" | "Fri" | "Sat" | "Sun" >
| < DAYS_LONG : "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday" >
| < MONTH : "January" | "February" |  "March" | "April" | "May" | "June" | "July" | "August" | "September" | "October" | "November" | "December" >
| < TIME : (< DIGIT >)< COLON >(< DIGIT >){2} >
| < #LETTER : ["a"-"z","A"-"Z"] >
| < WORD : (< LETTER > )+ > // this is to be kept last to avoid any matches}

void Library() :{int count = 0;}
{ (< LIBRARY >{count++;System.out.println("count is now " + count);} < QUOTE > (Word())+ < QUOTE ><LB > Content() <RB >)* <EOF > {
   if (count > 1)   {
     throw new ParseException("Sorry, but you cannot have more than one LIBRARY in a input file");
   } }}

void Content() :{}
{	Website()
	Building()
	TimeofYear()
}

void TimeofYear() : {}
{
  < TIMEOFYEAR > < QUOTE > (Word())+ < QUOTE > <LB >
  < START > StartandEnd()
  < END > StartandEnd()
  (< HOURS > <DAYS_SHORT > (< COMMA > <DAYS_SHORT >)* < LP > ((<TIME > (< AM > | < PM >) (< TO >) <TIME > (< AM > | < PM >)) | < CLOSED >) < RP >)+
  < RB >
}

void StartandEnd() :{}
{	<DAYS_LONG > <COMMA >  <DAY > <MONTH > <YEAR >
}

void Building() :{}
{	< BUILDING > <BUILDING_NUMBER >
}

void Website() :{}
{	< WEBSITE ><URL >
}

// this has all the possible tokens that could match. 
void Word() :{}
{< DAYS_SHORT > | < DAYS_LONG > | < MONTH > | < AM > | < PM > | < AUTHOR > | < TITLE > | < BOOK > | < TO >
| < BOOKCOLLECTION > | < RATE > | < TYPE > | < EMAIL > | < POSITION > | < STAFF >| < CLOSED > | < HOURS > | < END > | < START >
| < TIMEOFYEAR > | < BUILDING > | < WEBSITE > | < LIBRARY > | < WORD > 
}
