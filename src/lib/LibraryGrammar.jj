/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(LibParser)package lib;
public class LibParser{
  private int website_count = 0;}PARSER_END(LibParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{
  < LP : "(" >
| < RP : ")" >
| < COMMA : "," >
| < COLON : ":" >
| < LB : "{" >
| < RB : "}" >
| < SEMI: ";">
| < QUOTE : "\"" >
| < UNDERSCORE : "_" >
| < HYPHEN : "-" >
| < DOLLAR : "$" >
| < FULLSTOP: "." >
| < LIBRARY : "LIBRARY" >
| < WEBSITE : "WEBSITE" >
| < BUILDING : "BUILDING" >
| < TIMEOFYEAR: "TIMEOFYEAR" >
| < START: "START" >
| < END : "END" >
| < HOURS : "HOURS" >
| < CLOSED : "CLOSED" >
| < STAFF : "STAFF" >
| < POSITION : "POSITION" >
| < EMAIL : "EMAIL" >
| < TYPE : "TYPE" >
| < RATE : "RATE" >
| < BOOKCOLLECTION : "BOOKCOLLECTION" >
| < BOOK : "BOOK" >
| < TITLE : "TITLE" >
| < AUTHOR : "AUTHOR" >
| < #DIGIT : ["0"-"9"] >
| < BUILDING_NUMBER : (< DIGIT >){3} >
| < AM : "AM" >
| < PM : "PM" >
| < TO : "to" >
| < DAY : (< DIGIT >) | (< DIGIT >){2} >
| < YEAR : (< DIGIT >){4} >
| < WORK_TYPE : "Full-time" | "Part-time" >
| <# PAYTYPE1 :(< DIGIT >)+ < FULLSTOP > (< DIGIT >){2} >
| <# PAYTYPE2 :(< DIGIT >)+ > 
| < PAY : < DOLLAR > (< PAYTYPE1 > | < PAYTYPE2 >) >
| < #PROTOCOL1 : "http://"  >
| < #PROTOCOL2 : "https://"  >
| < URL : < QUOTE > (< PROTOCOL1 > | < PROTOCOL2 >) (["a"-"z","A"-"Z","_","-",".", "/"])* < QUOTE >>
| <# LOCAL : (< ANUMERIC >)+ (< FULLSTOP > < ANUMERIC >)* >
| <# DOMAIN: (< ANUMERIC_HYPHEN >)+ (< FULLSTOP > < ANUMERIC_HYPHEN >)* >
| <# ANUMERIC : (["a"-"z","A"-"Z","0"-"9"])+ >
| <# ANUMERIC_HYPHEN : (["a"-"z","A"-"Z","0"-"9", "-"])+ >
| < VALID_EMAIL: < LOCAL > "@" < DOMAIN >>
| < DAYS_SHORT : "Mon" | "Tue" | "Wed" | "Thu" | "Fri" | "Sat" | "Sun" >
| < DAYS_LONG : "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday" >
| < MONTH : "January" | "February" |  "March" | "April" | "May" | "June" | "July" | "August" | "September" | "October" | "November" | "December" >
| < TIME : (< DIGIT >)< COLON >(< DIGIT >){2} >
| < #LETTER : ["a"-"z","A"-"Z"] >
| < #BOOK_CHAR : (< DIGIT >) | < LETTER >  >
| < BOOK_DIGIT : (< BOOK_CHAR >){8} >
| < INITIAL :  ["A"-"Z"] <FULLSTOP >>
| < AUTHOR_NAME : ["A"-"Z"] (["a"-"z"])* >
| < WORD : < QUOTE > (< LETTER > | " " )+ < QUOTE > > // this is to be kept last to avoid any matches
| < BOOK_TITLE : < QUOTE > (< LETTER > | " " | < COLON > | < HYPHEN >)+ < QUOTE > >}

void Library() :{int count = 0;}
{ (< LIBRARY >{count++;} <WORD > <LB > Content() <RB >)* <EOF > {
   if (count > 1)   {
     throw new ParseException("Sorry, but you cannot have more than one LIBRARY in a input file");
   } }}

void Content() :{
  int website_count,building_count,timeofyear_count,staff_count,bookcollection_count;
  website_count = 0;
  building_count = 0;
  timeofyear_count = 0;
  staff_count = 0;
  bookcollection_count = 0;
  }
{	(
	  Website(){
	    website_count++;
	    if (website_count > 1)	    {			throw new ParseException("Sorry, you cannot have more than one website entry");
	    }
	  } |
	  Building(){
	    building_count++;
	    if (building_count > 1)	    {			throw new ParseException("Sorry, you cannot have more than one building entry");
	    }
	  } |
	  TimeofYear(){timeofyear_count++;} |
	  Staff(){staff_count++;} |
	  BookCollection(){bookcollection_count++;}
	)+

	// check in the end to ensure that there is one of them each
	{		if(website_count != 1)		{			throw new ParseException("Sorry, you must have ONE website entry");
		}
		if(building_count != 1)
		{
			throw new ParseException("Sorry, you must have ONE building entry");
		}
		if(!(timeofyear_count >= 1))
		{
			throw new ParseException("Sorry, you must have atleast ONE time of year entry");
		}
		if(!(staff_count >= 1))
		{
			throw new ParseException("Sorry, you must have atleast ONE staff entry");
		}
		if(!(bookcollection_count >= 1))
		{
			throw new ParseException("Sorry, you must have ONE book collection entry");
		}
	}
}

void BookCollection() :{
	int book_entries = 0;
  }
{
  < BOOKCOLLECTION > <WORD >  <LB >
  (BookEntry(){book_entries++;})+
  < RB >
  {
    if (book_entries < 1)    {
      throw new ParseException("Sorry, you must have ATLEAST ONE book entry in the collection");    }  }}

//ANY ORDER
void BookEntry() :{
	int titles = 0;
	int authors = 0;
  }
{
  < BOOK > <BOOK_DIGIT > <LB >
   (     Title()     {
       titles++;
       if (titles >1)       {
         throw new ParseException("Sorry you cannot have more than ONE title");       }
     } |
   	 Author()   	 {
   	   authors++;   	 }
   )*
  < RB >
  {
    if (titles != 1)    {
      throw new ParseException("Sorry you must have EXACTLY ONE title");    }
    if(authors <1)    {
      throw new ParseException("Sorry you must have ATLEAST ONE author");    }  }}

void Author() :{}
{
  < AUTHOR > <QUOTE > ( < AUTHOR_NAME > <COMMA > (<AUTHOR_NAME > | < INITIAL >)+) <QUOTE > }

void Title() :{}
{
  < TITLE > Book_Title()}

void Book_Title() :{}
{
  < BOOK_TITLE > | < WORD >}

// IN ANY ORDER
void Staff() :{
  int position = 0;
  int email = 0;
  int type = 0;
  int rate = 0;
  }
{
  < STAFF ><WORD > <LB >
  (
  Position(){
    position++;
    if (position > 1)    {
      throw new ParseException("Sorry, you cannot have more than ONE position");    }
   } |
  Email(){email++;} |
  Type(){
    type++;
    if (type > 1)    {
      throw new ParseException("Sorry, you cannot have more than ONE type");    }
   } |
  Rate(){
    rate++;
	if (rate > 1)	{
	  throw new ParseException("Sorry, you cannot have more than ONE rate");	}
   }
  )+
  < RB >
  {
    if (position != 1)    {
      throw new ParseException("Sorry, you must have EXACTLY ONE position");    }
    if (type != 1)
    {
      throw new ParseException("Sorry, you must have EXACTLY ONE type");
    }
    if (rate != 1)
    {
      throw new ParseException("Sorry, you must have EXACTLY ONE rate");
    }
    if(email<1)    {
      throw new ParseException("Sorry, you must have ATLEAST ONE email");    }  }
}

void Rate() :{}
{
  < RATE ><PAY >}

void Type() :{}
{
  < TYPE > <WORK_TYPE >}

void Position() :{}
{
  < POSITION > <WORD >}

void Email() :{}
{
  < EMAIL > <VALID_EMAIL >}

// FIXED ORDER 
void TimeofYear() : {
  int start = 0;
  int end  = 0;
  int hours = 0;
  }
{
  < TIMEOFYEAR ><WORD > <LB >
  < START > StartandEnd()
  {
    start++;
    if (start > 1)    {		throw new ParseException("Sorry, you can only have ONE start");
    }
  }
  < END > StartandEnd()
    {
    end++;
    if (end > 1)
    {
		throw new ParseException("Sorry, you can only have ONE end");
    }
  }
  (Hours(){hours++;})+  {	if (hours < 1)	{		throw new ParseException("Sorry you must have atleast ONE hours entry");
	}
  }
  < RB >
  {
    if(start != 1)    {
      throw new ParseException("Sorry you can only have EXACTLY one start");    }
    if(end != 1)    {
      throw new ParseException("Sorry, you can have EXACTLY one end");    }
    if(hours < 1)    {
      throw new ParseException("Sorry, you must have ATLEAST one hour");    }  }
}

void Hours() :{}
{
 < HOURS > <DAYS_SHORT> (< COMMA > <DAYS_SHORT >)* < LP > ((<TIME > (< AM > | < PM >) (< TO >) <TIME > (< AM > | < PM >)) | < CLOSED >) < RP > }

void StartandEnd() :{}
{	<DAYS_LONG > <COMMA >  <DAY > <MONTH > <YEAR >
}

void Building() :{}
{	< BUILDING > <BUILDING_NUMBER >
}

void Website() :{}
{	< WEBSITE ><URL >
}

// this has all the possible tokens that could match. 
/*void Word() :{}
{< DAYS_SHORT > | < DAYS_LONG > | < MONTH > | < AM > | < PM > | < AUTHOR > | < TITLE > | < BOOK > | < TO >
| < BOOKCOLLECTION > | < RATE > | < TYPE > | < EMAIL > | < POSITION > | < STAFF >| < CLOSED > | < HOURS > | < END > | < START >
| < TIMEOFYEAR > | < BUILDING > | < WEBSITE > | < LIBRARY > | < WORD > 
}
*/
